{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    'content-menu',
    view_mode ? 'content-menu--' ~ view_mode|clean_class,
  ]
%}

{{ attach_library('hdbt_subtheme/content-menu') }}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% embed "@hdbt/misc/container.twig" with {container_element: 'content-menu'} %}
      {% block container_content %}
        <div class="content-menu__content">
          <ul class="content-menu__navigation" role="tablist">
            {% for key, link in menu_links %}
              {% set linkAttributes = create_attribute() %}
              {%
                set linkClasses = [
                  'content-menu__navigation-link',
                  loop.first ? 'active',
                ]
              %}
              {% if loop.first %}
                {% set linkAttributes = linkAttributes.setAttribute('aria-selected', 'true') %}
              {% else %}
                {% set linkAttributes = linkAttributes.setAttribute('aria-selected', 'false') %}
              {% endif %}
              <li class="content-menu__navigation-item" role="tab">
                <a id="{{ link.title.aria }}" {{ linkAttributes.addClass(linkClasses) }} data-id="{{ key }}" tabindex="0" aria-controls="{{ link.title.aria }}-tab">{{ link.title.value }}</a>
              </li>
            {% endfor %}
          </ul>
          <select class="hds-select content-menu__navigation-select">
            {% for key, link in menu_links %}
              {% set optionAttributes = create_attribute() %}
              {%
                set optionClasses = [
                  'content-menu__navigation-link',
                  loop.first ? 'active',
                ]
              %}
              <option {{ optionAttributes.addClass(optionClasses) }} class="content-menu__navigation-item" data-id="{{ key }}" value="{{ key }}" tabindex="0">
                {{ link.title.value }}
              </option>
            {% endfor %}
          </select>
          <div class="content-menu__items">
            {{ content }}
          </div>
        </div>
      {% endblock %}
    {% endembed %}
  </div>
{% endblock paragraph %}
